-- =======================
-- Shop Tab Module (Patched)
-- =======================

return function(Window, player, QuestEvent, quests, RunService, serverEvent)
    -- Load stockTable from repo
    local stockTable = loadstring(game:HttpGet("https://github.com/OMchronicwtf/jjsautofarm/raw/refs/heads/main/Stock%20Table"))()

    -- Ordered keys to match display order
    local orderedKeys = {
        "MV1", "MV2", "MV3", "MV9", "MV8", "MV14", "MV5", "MV6", "MV7", "MV15",
        "MV10", "MV12", "MV11", "MV13"
    }

    -- Reference to AvailableStock folder
    local availableStock = game:GetService("ReplicatedStorage"):WaitForChild("AvailableStock")

    -- Create the Shop Tab
    local ShopTab = Window:CreateTab("Shop", "shopping-bag")

    -- Create a Section for organization
    ShopTab:CreateSection("Purchase Items")

    -- Dropdown reference
    local ItemDropdown

    -- Function to refresh dropdown with only in-stock items
    local function refreshDropdown()
        local availableKeys = {}
        for _, child in ipairs(availableStock:GetChildren()) do
            table.insert(availableKeys, child.Name)
        end

        -- Sort based on orderedKeys
        table.sort(availableKeys, function(a, b)
            local ia = table.find(orderedKeys, a)
            local ib = table.find(orderedKeys, b)
            return (ia or math.huge) < (ib or math.huge)
        end)

        local options = {}
        for _, key in ipairs(availableKeys) do
            local data = stockTable[key]
            if data then
                table.insert(options, data.Name .. " (" .. key .. ") - " .. data.Price)
            end
        end

        ItemDropdown:Refresh(options)

        -- Default to first option if none selected
        if #options > 0 and #ItemDropdown.CurrentOption == 0 then
            ItemDropdown:Set({options[1]})
        end
    end

    -- Create the dropdown (with safe callback)
    ItemDropdown = ShopTab:CreateDropdown({
        Name = "Select Item",
        Options = {},
        CurrentOption = {},
        MultipleOptions = false,
        Flag = "ShopItemDropdown",
        Callback = function(Options)
            if Options and #Options > 0 then
                Rayfield:Notify({
                    Title = "Shop",
                    Content = "Selected: " .. table.concat(Options, ", "),
                    Duration = 4,
                    Image = "check"
                })
            else
                Rayfield:Notify({
                    Title = "Shop",
                    Content = "No item selected.",
                    Duration = 3,
                    Image = "info"
                })
            end
        end,
    })

    -- Initial population
    refreshDropdown()

    -- Update dropdown when stock changes
    availableStock.ChildAdded:Connect(refreshDropdown)
    availableStock.ChildRemoved:Connect(refreshDropdown)

    -- Helper to turn "$ 75,000" into 75000
    local function parsePrice(priceStr)
        return tonumber(priceStr:gsub("[^%d]", "")) or 0
    end

    -- Buy button
    ShopTab:CreateButton({
        Name = "Buy Selected Item",
        Callback = function()
            local selected = ItemDropdown.CurrentOption[1]
            if not selected then
                Rayfield:Notify({
                    Title = "Shop",
                    Content = "No item selected!",
                    Duration = 5,
                    Image = "x-circle"
                })
                return
            end

            -- Extract key (e.g. MV1) from "Name (MV1) - Price"
            local key = selected:match("%((.-)%)")
            if not key then
                Rayfield:Notify({
                    Title = "Shop",
                    Content = "Could not parse item key from selection!",
                    Duration = 5,
                    Image = "alert-triangle"
                })
                return
            end

            local data = stockTable[key]
            if not data then
                Rayfield:Notify({
                    Title = "Shop",
                    Content = "Item data not found!",
                    Duration = 5,
                    Image = "x-circle"
                })
                return
            end

            -- Player cash
            local playerData = player:WaitForChild("Data")
            local playerCash = playerData:WaitForChild("Cash").Value

            local itemPrice = parsePrice(data.Price)
            if playerCash < itemPrice then
                Rayfield:Notify({
                    Title = "Shop",
                    Content = "Insufficient funds! Need " .. itemPrice .. " but have " .. playerCash,
                    Duration = 6,
                    Image = "alert-octagon"
                })
                return
            end

            if QuestEvent then
                QuestEvent:FireServer({ Item = key, Type = "StockBuy" })
                Rayfield:Notify({
                    Title = "Shop",
                    Content = "Attempted to buy: " .. data.Name .. " (" .. key .. ")",
                    Duration = 5,
                    Image = "shopping-bag"
                })

                -- Refresh after short delay
                task.spawn(function()
                    task.wait(0.2)
                    refreshDropdown()
                end)
            else
                Rayfield:Notify({
                    Title = "Shop",
                    Content = "QuestEvent not available!",
                    Duration = 5,
                    Image = "x-circle"
                })
            end
        end,
    })

    return ShopTab
end
