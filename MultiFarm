return function(player, QuestEvent, quests, teleports, RunService, FarmingTab)
    local farming = false
    local selectedQuests = {}

    -- Dropdown for selecting quests
    local QuestDropdown = FarmingTab:CreateDropdown({
        Name = "Select Quests",
        Options = {},
        CurrentOption = {},
        MultipleOptions = true,
        Flag = "MultiQuestDropdown",
        Callback = function(Options)
            selectedQuests = Options
        end,
    })

    -- Populate dropdown with quest names
    local questNames = {}
    for questName, _ in pairs(quests) do
        table.insert(questNames, questName)
    end
    QuestDropdown:Refresh(questNames, true)

    -- Toggle for farming
    local FarmToggle = FarmingTab:CreateToggle({
        Name = "Multi-Quest Farm",
        CurrentValue = false,
        Flag = "MultiQuestFarmToggle",
        Callback = function(Value)
            farming = Value
            if farming then
                task.spawn(function()
                    while farming do
                        for _, questName in ipairs(selectedQuests) do
                            if not farming then break end

                            local questInfo = quests[questName]
                            if questInfo then
                                -- Cancel any leftover quest
                                QuestEvent:FireServer("QuitMission")

                                -- Teleport to correct zone
                                local teleportCF = teleports[questInfo.Zone]
                                if teleportCF then
                                    player.Character:PivotTo(teleportCF)
                                    task.wait(1.5) -- wait for zone to load fully
                                end

                                -- Check if already in a quest
                                local questFrame = player.PlayerGui:FindFirstChild("Quest")
                                    and player.PlayerGui.Quest:FindFirstChild("Mission")
                                local inQuest = questFrame and questFrame.Visible

                                if not inQuest then
                                    -- Start quest
                                    QuestEvent:FireServer("StartMission", questName)
                                    task.wait(1)
                                end

                                -- Farm enemies while quest is active
                                while farming do
                                    questFrame = player.PlayerGui:FindFirstChild("Quest")
                                        and player.PlayerGui.Quest:FindFirstChild("Mission")
                                    inQuest = questFrame and questFrame.Visible

                                    if not inQuest then
                                        break -- quest finished
                                    end

                                    local target = questInfo.Target
                                    for _, enemy in ipairs(workspace.Living:GetChildren()) do
                                        if enemy.Name == target and enemy:FindFirstChild("HumanoidRootPart") and enemy:FindFirstChild("Humanoid") and enemy.Humanoid.Health > 0 then
                                            -- Move above enemy
                                            player.Character:PivotTo(enemy.HumanoidRootPart.CFrame * CFrame.new(0, 3, 0))
                                        end
                                    end

                                    task.wait(0.3)
                                end
                            end

                            -- Short wait before looping to next quest (prevents fling issue)
                            if farming then
                                task.wait(0.75)
                            end
                        end
                    end
                end)
            else
                -- Cancel quest when turning OFF
                QuestEvent:FireServer("QuitMission")
            end
        end,
    })
end
