-- =======================
-- Shop Tab Module
-- =======================

return function(Window, player, QuestEvent, quests, RunService, serverEvent)
    -- Load stockTable locally within this module
    local stockTable = loadstring(game:HttpGet("https://github.com/OMchronicwtf/jjsautofarm/raw/refs/heads/main/Stock%20Table"))()

    -- Ordered keys to match the exact sequence in the stockTable definition
    local orderedKeys = {
        "MV1", "MV2", "MV3", "MV9", "MV8", "MV14", "MV5", "MV6", "MV7", "MV15",
        "MV10", "MV12", "MV11", "MV13"
    }

    -- Reference to AvailableStock folder (for optional availability check)
    local availableStock = game:GetService("ReplicatedStorage"):WaitForChild("AvailableStock")

    -- Create the Shop Tab
    local ShopTab = Window:CreateTab("Shop", "shopping-bag") -- Using Lucide icon for shop theme

    -- Create a Section for organization
    ShopTab:CreateSection("Purchase Items")

    -- Build formatted options from stockTable in the exact order (all items available for buy)
    local options = {}
    for _, key in ipairs(orderedKeys) do
        local data = stockTable[key]
        if data then
            local availability = availableStock:FindFirstChild(key) and "[Stock] " or ""
            table.insert(options, availability .. data.Name .. " (" .. key .. ") - " .. data.Price)
        end
    end

    -- Single dropdown populated with all items from stockTable (in table order)
    local ItemDropdown = ShopTab:CreateDropdown({
        Name = "Select Item",
        Options = options,
        CurrentOption = {options[1] or ""},
        MultipleOptions = false,
        Flag = "ShopItemDropdown",
        Callback = function(Options)
            print("Selected item(s):", table.concat(Options, ", "))
        end,
    })

    -- Optional: Update availability indicators on stock changes (refreshes options with [Stock] tag)
    local function updateAvailability()
        local newOptions = {}
        for _, key in ipairs(orderedKeys) do
            local data = stockTable[key]
            if data then
                local availability = availableStock:FindFirstChild(key) and "[Stock] " or ""
                table.insert(newOptions, availability .. data.Name .. " (" .. key .. ") - " .. data.Price)
            end
        end
        ItemDropdown:Refresh(newOptions)
        -- Preserve selection if possible (find matching option)
        local currentKey = ItemDropdown.CurrentOption[1]:match("%((%u%w+)%)")
        if currentKey then
            for i, opt in ipairs(newOptions) do
                if opt:match("%(" .. currentKey .. "%)") then
                    ItemDropdown:Set({opt})
                    break
                end
            end
        end
    end
    availableStock.ChildAdded:Connect(updateAvailability)
    availableStock.ChildRemoved:Connect(updateAvailability)

    -- Helper function to parse price to number (e.g., "$ 75,000" -> 75000)
    local function parsePrice(priceStr)
        return tonumber(priceStr:gsub("[^%d]", ""))
    end

    -- Single button to buy the selected item (works for all via StockBuy)
    local BuyButton = ShopTab:CreateButton({
        Name = "Buy Selected Item",
        Callback = function()
            local selected = ItemDropdown.CurrentOption[1]
            if not selected then
                print("No item selected!")
                return
            end

            -- Parse the key (e.g., "MV1") from the formatted option
            local key = selected:match("%((%u%w+)%)")
            if not key then
                print("Could not parse item key from selection!")
                return
            end

            local data = stockTable[key]
            if not data then
                print("Item data not found!")
                return
            end

            -- Get player's cash
            local playerData = player:WaitForChild("Data")
            local playerCash = playerData:WaitForChild("Cash").Value

            local itemPrice = parsePrice(data.Price)
            if playerCash < itemPrice then
                print("Insufficient funds! Need " .. itemPrice .. " but have " .. playerCash)
                return
            end

            if QuestEvent then
                QuestEvent:FireServer({ Item = key, Type = "StockBuy" })
                print("Attempted to buy: " .. key .. " (" .. data.Name .. ")")
                -- Update availability after buy (in case it affects stock)
                task.spawn(function()
                    task.wait(0.2)
                    updateAvailability()
                end)
            else
                print("QuestEvent not available!")
            end
        end,
    })

    return ShopTab -- Return the tab reference to match other modules
end
