-- =======================
-- Shop Tab Module
-- =======================

return function(Window, player, QuestEvent, quests, RunService, serverEvent)
    -- Load stockTable locally within this module
    local stockTable = loadstring(game:HttpGet("https://github.com/OMchronicwtf/jjsautofarm/raw/refs/heads/main/Stock%20Table"))()

    -- Ordered keys to match the exact sequence in the stockTable definition
    local orderedKeys = {
        "MV1", "MV2", "MV3", "MV9", "MV8", "MV14", "MV5", "MV6", "MV7", "MV15",
        "MV10", "MV12", "MV11", "MV13"
    }

    -- Reference to AvailableStock folder
    local availableStock = game:GetService("ReplicatedStorage"):WaitForChild("AvailableStock")

    -- Create the Shop Tab
    local ShopTab = Window:CreateTab("Shop", "shopping-bag") -- Using Lucide icon for shop theme

    -- Create a Section for organization
    ShopTab:CreateSection("Purchase Items")

    -- Function to refresh dropdown based on AvailableStock children
    local ItemDropdown
    local function refreshDropdown()
        local availableKeys = {}
        for _, child in ipairs(availableStock:GetChildren()) do
            table.insert(availableKeys, child.Name)
        end

        -- Sort available keys to match orderedKeys sequence
        table.sort(availableKeys, function(a, b)
            local ia = table.find(orderedKeys, a)
            local ib = table.find(orderedKeys, b)
            return (ia or math.huge) < (ib or math.huge)
        end)

        local options = {}
        for _, key in ipairs(availableKeys) do
            local data = stockTable[key]
            if data then
                table.insert(options, data.Name .. " (" .. key .. ") - " .. data.Price)
            end
        end

        ItemDropdown:Refresh(options)

        -- Reset to first option if no selection and options available
        if #options > 0 and #ItemDropdown.CurrentOption == 0 then
            ItemDropdown:Set({options[1]})
        end
    end

    -- Initial empty dropdown (will be refreshed immediately after)
    ItemDropdown = ShopTab:CreateDropdown({
        Name = "Select Item",
        Options = {},
        CurrentOption = {},
        MultipleOptions = false,
        Flag = "ShopItemDropdown",
        Callback = function(Options)
            -- Placeholder; prints selected for now
            print("Selected item(s):", table.concat(Options, ", "))
        end,
    })

    -- Initial refresh
    refreshDropdown()

    -- Connect events to update dropdown on stock changes
    availableStock.ChildAdded:Connect(refreshDropdown)
    availableStock.ChildRemoved:Connect(refreshDropdown)

    -- Helper function to parse price to number (e.g., "$ 75,000" -> 75000)
    local function parsePrice(priceStr)
        return tonumber(priceStr:gsub("[^%d]", ""))
    end

    -- Button to buy the selected item
    local BuyButton = ShopTab:CreateButton({
        Name = "Buy Selected Item",
        Callback = function()
            local selected = ItemDropdown.CurrentOption[1]
            if not selected then
                print("No item selected!")
                return
            end

            -- Parse the key (e.g., "MV1") from the formatted option
            local key = selected:match("%((%u%w+)%)")
            if not key then
                print("Could not parse item key from selection!")
                return
            end

            -- Check if item is still in stock before attempting purchase
            if not availableStock:FindFirstChild(key) then
                print("Item no longer in stock! Refreshing dropdown...")
                refreshDropdown() -- Force refresh if needed
                return
            end

            local data = stockTable[key]
            if not data then
                print("Item data not found!")
                return
            end

            -- Get player's cash (from player.Data.Cash.Value)
            local playerData = player:WaitForChild("Data")
            local playerCash = playerData:WaitForChild("Cash").Value

            local itemPrice = parsePrice
