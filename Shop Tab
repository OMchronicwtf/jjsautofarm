-- ShopTabModule.lua
return function(Window, Event, StockTable)
    -- Create Shop Tab
    local ShopTab = Window:CreateTab("Shop", "shopping-cart")
    local ShopSection = ShopTab:CreateSection("Shop") -- visual only

    local selectedItem = nil

    -- Helper function to build dropdown options based on available stock
    local function getAvailableItems()
        local options = {}
        if not StockTable or type(StockTable) ~= "table" then
            return options -- Return empty if no stock
        end
        for _, item in ipairs(StockTable) do
            if item and item.Available then -- assumes each item in StockTable has Available = true/false
                table.insert(options, item.Name .. " | " .. item.DisplayName)
            end
        end
        return options
    end

    -- Create dropdown
    local ItemDropdown = ShopTab:CreateDropdown({
        Name = "Select Item",
        Options = getAvailableItems(),
        CurrentOption = {},
        MultipleOptions = false,
        Flag = "ShopDropdown",
        Callback = function(option)
            selectedItem = option[1]:match("^(%w+)")
        end
    })

    -- Update dropdown dynamically whenever stock changes
    local function updateDropdown()
        local options = getAvailableItems()
        ItemDropdown:Refresh(options)
        if selectedItem and not table.find(options, selectedItem) then
            selectedItem = nil
        end
    end

    -- Purchase button
    ShopTab:CreateButton({
        Name = "Purchase",
        Callback = function()
            if selectedItem then
                Event:FireServer({
                    Item = selectedItem,
                    Type = "StockBuy"
                })

                -- Mark item as unavailable locally (only if StockTable exists)
                if StockTable then
                    for _, item in ipairs(StockTable) do
                        if item and item.Name == selectedItem then
                            item.Available = false
                            break
                        end
                    end
                end

                updateDropdown()

                Rayfield:Notify({
                    Title = "Shop",
                    Content = "Purchased: " .. selectedItem,
                    Duration = 4,
                    Image = "shopping-cart"
                })
            else
                Rayfield:Notify({
                    Title = "Shop",
                    Content = "No item selected or item unavailable!",
                    Duration = 4,
                    Image = "alert-circle"
                })
            end
        end
    })

    -- Optional: If StockTable is updated externally, call updateDropdown() here

    return ShopTab
end
