-- ===========================================
-- Shopping Tab (Dynamic Dropdown + Buy)
-- ===========================================
return function(Window, Event, StockTable)
    local ShopTab = Window:CreateTab("Shopping ðŸ›’", "shopping-bag")
    local ShopSection = ShopTab:CreateSection("Item Shop")

    -- Get AvailableStock folder
    local AvailableStock = game:GetService("ReplicatedStorage"):WaitForChild("AvailableStock")

    local selectedItem = nil
    local itemNames = {}
    local availableItems = {} -- store displayName -> key for lookup

    -- Helper to build options
    local function buildOptions()
        itemNames = {}
        availableItems = {}
        if not StockTable or type(StockTable) ~= "table" then
            return
        end
        for key, item in pairs(StockTable) do
            if not item or not item.Name or not item.Price then
                continue
            end
            if AvailableStock:FindFirstChild(key) then
                local displayName = item.Name .. " - " .. item.Price
                table.insert(itemNames, displayName)
                availableItems[displayName] = key
            end
        end
        -- Sort dropdown in table order (MV1 â†’ MV15)
        table.sort(itemNames, function(a, b)
            local numA = tonumber(availableItems[a]:match("%d+")) or 0
            local numB = tonumber(availableItems[b]:match("%d+")) or 0
            return numA < numB
        end)
    end

    buildOptions()

    -- Create dropdown
    local ItemDropdown = ShopTab:CreateDropdown({
        Name = "Select Item",
        Options = itemNames,
        CurrentOption = itemNames[1] and {itemNames[1]} or {},
        MultipleOptions = false,
        Flag = "ShopDropdown",
        Callback = function(option)
            selectedItem = option[1]
        end,
    })

    -- Optional: Refresh if stock changes (e.g., connect to child removed/added if needed)
    -- For now, rebuild on load

    -- Buy button
    ShopTab:CreateButton({
        Name = "Buy Selected Item",
        Callback = function()
            if not selectedItem or not availableItems[selectedItem] then
                Rayfield:Notify({
                    Title = "Error",
                    Content = "No item selected or item not available!",
                    Duration = 5,
                    Image = "x"
                })
                return
            end

            local itemId = availableItems[selectedItem]

            Event:FireServer({
                Item = itemId,
                Type = "StockBuy"
            })

            Rayfield:Notify({
                Title = "Success",
                Content = "Purchased: " .. selectedItem,
                Duration = 5,
                Image = "shopping-cart"
            })

            -- Optional: Rebuild options after purchase (removes bought item if server removes from AvailableStock)
            task.wait(0.5) -- Give server time to update
            buildOptions()
            ItemDropdown:Refresh(itemNames)
            selectedItem = nil -- Reset selection
        end
    })

    return ShopTab
end
