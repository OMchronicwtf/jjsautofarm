-- =======================
-- Quest Module (Organized)
-- version: 1.0.2
-- =======================

return function(Window, player, QuestEvent, quests, RunService)
    -- Create Main Tab
    local MainTab = Window:CreateTab("Main", "scroll")

    -- =======================
    -- Quest Info Section
    -- =======================
    MainTab:CreateSection("Quest Info")

    local questInfoLabel = MainTab:CreateLabel("Current Level: 0\nCurrent Quest: None | Next Quest: None")

    RunService.Heartbeat:Connect(function()
        local level = player:WaitForChild("Data"):WaitForChild("Level").Value

        -- Sort quests by MinLevel ascending
        table.sort(quests, function(a, b)
            return a.MinLevel < b.MinLevel
        end)

        local highestQuest, nextQuest
        for i, q in ipairs(quests) do
            if level >= q.MinLevel then
                highestQuest = q
            elseif not nextQuest then
                nextQuest = q
            end
        end

        local currentQuestText = highestQuest and highestQuest.DisplayName or "None"
        local nextQuestText = nextQuest and nextQuest.DisplayName or "Max"

        questInfoLabel:Set(string.format(
            "Current Level: %d\nCurrent Quest: %s | Next Quest: %s",
            level,
            currentQuestText,
            nextQuestText
        ))
    end)

    -- =======================
    -- Auto Quests Section
    -- =======================
    MainTab:CreateSection("Auto Quests")

    -- AutoQuest (Highest Quest)
    local autoQuestEnabled = false
    local autoQuestLoop

    local function GetHighestQuest()
        local level = player:WaitForChild("Data"):WaitForChild("Level").Value
        local selected
        for _, q in ipairs(quests) do
            if level >= q.MinLevel then
                selected = q
            end
        end
        return selected
    end

    local function IsInQuest()
        local questFrame = player.PlayerGui:FindFirstChild("Quest") and player.PlayerGui.Quest:FindFirstChild("Mission")
        return questFrame and questFrame.Visible or false
    end

    MainTab:CreateToggle({
        Name = "AutoQuest (Highest Available)",
        CurrentValue = false,
        Flag = "AutoQuestToggle",
        Callback = function(state)
            autoQuestEnabled = state

            if state then
                QuestEvent:FireServer({Type = "RemoveQuest"})
                task.wait(0.1)

                autoQuestLoop = RunService.Heartbeat:Connect(function()
                    if not autoQuestEnabled then return end
                    if IsInQuest() then return end
                    local quest = GetHighestQuest()
                    if quest then
                        QuestEvent:FireServer({Quest = quest.QuestName, Type = "RepeatQuest"})
                    end
                end)
            else
                if autoQuestLoop then
                    autoQuestLoop:Disconnect()
                    autoQuestLoop = nil
                end
                QuestEvent:FireServer({Type = "RemoveQuest"})
            end
        end
    })

    -- =======================
    -- Auto Start Specific Quest
    -- =======================
    local selectedQuest = quests[1].DisplayName
    local autoStartSpecificEnabled = false
    local specificQuestConnection

    -- Toggle first
    MainTab:CreateToggle({
        Name = "Start Specific Quest",
        CurrentValue = false,
        Flag = "AutoStartSpecificToggle",
        Callback = function(state)
            autoStartSpecificEnabled = state

            if state then
                QuestEvent:FireServer({Type = "RemoveQuest"})

                specificQuestConnection = RunService.Heartbeat:Connect(function()
                    if not autoStartSpecificEnabled then return end

                    local questFrame = player.PlayerGui:FindFirstChild("Quest") 
                        and player.PlayerGui.Quest:FindFirstChild("Mission")
                    local inQuest = questFrame and questFrame.Visible or false

                    if not inQuest then
                        local questObj
                        for _, q in ipairs(quests) do
                            if q.DisplayName == selectedQuest then
                                questObj = q
                                break
                            end
                        end
                        if questObj then
                            QuestEvent:FireServer({Quest = questObj.QuestName, Type = "RepeatQuest"})
                        end
                    end
                end)
            else
                if specificQuestConnection then
                    specificQuestConnection:Disconnect()
                    specificQuestConnection = nil
                end
                QuestEvent:FireServer({Type = "RemoveQuest"})
            end
        end
    })

    -- Dropdown second
    local questOptions = {}
    for _, q in ipairs(quests) do
        table.insert(questOptions, q.DisplayName)
    end

    MainTab:CreateDropdown({
        Name = "Choose Quest",
        Options = questOptions,
        CurrentOption = {questOptions[1]},
        MultipleOptions = false,
        Flag = "SpecificQuestDropdown",
        Callback = function(options)
            selectedQuest = options[1]
        end
    })

    return MainTab
end
