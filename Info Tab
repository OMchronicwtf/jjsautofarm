return function(Window, player, RunService)
    -- Create the Info tab inside Rayfield
    local Tab = Window:CreateTab("Info", "info") -- second param is a Lucide icon, e.g., "info"

    InfoTab:CreateSection("Info")
    
    -- UI Elements
    local InfoParagraph = Tab:CreateParagraph({
        Title = "Player Info:",
        Content = "Toggle 'Auto Update' to view info"
    })

    local StatsParagraph = Tab:CreateParagraph({
        Title = "Player Stats:",
        Content = "Toggle 'Auto Update' to view stats"
    })

    -- Configurable refresh interval (default 1s)
    local refreshInterval = 1
    local autoUpdate = false

    -- Helper to format text without trailing newline
    local function formatText(stats)
        local lines = {}
        for _, stat in ipairs(stats) do
            table.insert(lines, stat.Name .. ": " .. stat.Value)
        end
        return table.concat(lines, "\n")
    end

    -- Function to refresh
    local function RefreshStats()
        local UserInputService = game:GetService("UserInputService")

        -- ================= Player Info =================
        local areaHandler = player.PlayerGui:FindFirstChild("Area") 
            and player.PlayerGui.Area:FindFirstChild("Handler")
        local currentArea = areaHandler and areaHandler:FindFirstChild("Value") 
            and areaHandler.Value.Value or "Unknown"

        local dialogueGui = player.PlayerGui:FindFirstChild("Dialogue")
        local inDialogue = dialogueGui and dialogueGui.Enabled and true or false

        local questFrame = player.PlayerGui:FindFirstChild("Quest") 
            and player.PlayerGui.Quest:FindFirstChild("Mission")
        local questStatus = questFrame and questFrame.Visible and "In Quest" or "Not in Quest"

        local repeatFrame = player.PlayerGui:FindFirstChild("Quest") 
            and player.PlayerGui.Quest:FindFirstChild("Repeat")
        local repeatStatus = repeatFrame and repeatFrame.Visible and "Can Repeat" or "Cannot Repeat"

        local mobileGui = player.PlayerGui:FindFirstChild("Mobile")
        local platform = (mobileGui and mobileGui.Enabled) or UserInputService.TouchEnabled and "Mobile" or "PC"

        local bossNameValue = player.PlayerGui:FindFirstChild("BossName")
        local lastBoss = bossNameValue and bossNameValue.Value or "None"

        local infoStats = {
            {Name = "Platform", Value = platform},
            {Name = "Current Area", Value = currentArea},
            {Name = "In Dialogue", Value = tostring(inDialogue)},
            {Name = "Quest Status", Value = questStatus},
            {Name = "Repeat Quest", Value = repeatStatus},
            {Name = "Last Boss Attacked", Value = lastBoss}
        }

        InfoParagraph:Set({
            Title = "Player Info:",
            Content = formatText(infoStats)
        })

        -- ================= Player Stats =================
        local dataFolder = player:FindFirstChild("Data")
        local statValues = {
            {Name = "Level", Value = dataFolder and dataFolder:FindFirstChild("Level") and dataFolder.Level.Value or "N/A"},
            {Name = "Cash", Value = dataFolder and dataFolder:FindFirstChild("Cash") and dataFolder.Cash.Value or "N/A"},
            {Name = "Gems", Value = dataFolder and dataFolder:FindFirstChild("Gems") and dataFolder.Gems.Value or "N/A"},
            {Name = "Stamina", Value = dataFolder and dataFolder:FindFirstChild("Stamina") and dataFolder.Stamina.Value or "N/A"},
            {Name = "Max Stamina", Value = dataFolder and dataFolder:FindFirstChild("MaxStamina") and dataFolder.MaxStamina.Value or "N/A"},
            {Name = "Respect", Value = dataFolder and dataFolder:FindFirstChild("Respect") and dataFolder.Respect.Value or "N/A"},
            {Name = "Stat Points", Value = dataFolder and dataFolder:FindFirstChild("Points") and dataFolder.Points.Value or "N/A"}
        }

        StatsParagraph:Set({
            Title = "Player Stats:",
            Content = formatText(statValues)
        })
    end

    -- Auto update loop
    task.spawn(function()
        while true do
            if autoUpdate then
                RefreshStats()
            end
            task.wait(refreshInterval)
        end
    end)

    -- Toggles
    Tab:CreateToggle({
        Name = "Auto Update",
        CurrentValue = false,
        Flag = "AutoUpdateStats",
        Callback = function(Value)
            autoUpdate = Value
        end,
    })

    -- Slider for refresh rate (0.5s to 5s)
    Tab:CreateSlider({
        Name = "Refresh Interval (seconds)",
        Range = {0.5, 5},
        Increment = 0.5,
        Suffix = "sec",
        CurrentValue = 1,
        Flag = "RefreshInterval",
        Callback = function(Value)
            refreshInterval = Value
        end,
    })
end
