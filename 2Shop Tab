-- =======================
-- Shop Tab Module (AutoBuy Above Manual)
-- =======================

return function(Window, player, QuestEvent, quests, RunService, serverEvent, Rayfield)
    -- Hardcoded stockTable
    local stockTable = {
        MV1 = { Name = "Explosive Bomb", Price = "$ 75,000" },
        MV2 = { Name = "Construction", Price = "$ 150,000" },
        MV3 = { Name = "Rubber", Price = "$ 200,000" },
        MV9 = { Name = "Vital Arts", Price = "$ 650,000" },
        MV8 = { Name = "Turbo Soul", Price = "$ 850,000" },
        MV14 = { Name = "Sakura Blossom", Price = "$ 950,000" },
        MV5 = { Name = "Light", Price = "$ 1,250,000" },
        MV6 = { Name = "Star Guardian", Price = "$ 1,500,000" },
        MV7 = { Name = "Ice", Price = "$ 1,750,000" },
        MV15 = { Name = "Flame Breathing", Price = "$ 1,875,000" },
        MV10 = { Name = "Infinity", Price = "$ 2,150,000" },
        MV12 = { Name = "Monarch", Price = "$ 2,500,000" },
        MV11 = { Name = "Vessel", Price = "$ 2,900,000" },
        MV13 = { Name = "Spectral Reaper", Price = "$ 3,250,000" },
    }

    local orderedKeys = {
        "MV1", "MV2", "MV3", "MV9", "MV8", "MV14", "MV5", "MV6", "MV7", "MV15",
        "MV10", "MV12", "MV11", "MV13"
    }

    local availableStock = game:GetService("ReplicatedStorage"):FindFirstChild("AvailableStock")
    if not availableStock then
        availableStock = { GetChildren = function() return {} end }
        warn("AvailableStock not found - using empty mock")
    end

    local ShopTab = Window:CreateTab("Shop", "shopping-bag")

    -- Helper to parse "$ 1,250,000" â†’ 1250000
    local function parsePrice(priceStr)
        return tonumber(priceStr:gsub("[^%d]", "")) or 0
    end

    -------------------
    -- AutoBuy System (Now on top)
    -------------------
    ShopTab:CreateSection("AutoBuy Moveset")

    local AutoBuyTarget = nil
    local AutoBuyEnabled = false

    local allOptions = {}
    for _, key in ipairs(orderedKeys) do
        local data = stockTable[key]
        if data then
            table.insert(allOptions, data.Name .. " (" .. key .. ") - " .. data.Price)
        end
    end

    local AutoBuyDropdown = ShopTab:CreateDropdown({
        Name = "Choose Moveset",
        Options = allOptions,
        CurrentOption = {},
        MultipleOptions = false,
        Flag = "AutoBuyDropdown",
        Callback = function(Options)
            AutoBuyTarget = Options[1] or nil
            if AutoBuyTarget and Rayfield then
                Rayfield:Notify({
                    Title = "AutoBuy",
                    Content = "Target set to: " .. AutoBuyTarget,
                    Duration = 4,
                    Image = "check"
                })
            end
        end,
    })

    ShopTab:CreateToggle({
        Name = "Enable AutoBuy",
        CurrentValue = false,
        Flag = "AutoBuyToggle",
        Callback = function(Value)
            AutoBuyEnabled = Value
            if Rayfield then
                Rayfield:Notify({
                    Title = "AutoBuy",
                    Content = Value and "Enabled" or "Disabled",
                    Duration = 4,
                    Image = Value and "play" or "pause"
                })
            end
        end,
    })

    -------------------
    -- Manual Purchase
    -------------------
    ShopTab:CreateSection("Self-Buy Moveset")

    local ManualDropdown = ShopTab:CreateDropdown({
        Name = "Choose Moveset (In Stock)",
        Options = {},
        CurrentOption = {},
        MultipleOptions = false,
        Flag = "ManualDropdown",
        Callback = function() end, -- handled by button
    })

    ShopTab:CreateButton({
        Name = "Buy Selected",
        Callback = function()
            local selected = ManualDropdown.CurrentOption[1]
            if not selected then return end

            local key = selected:match("%((.-)%)")
            local data = key and stockTable[key]
            if not key or not data then return end

            local playerData = player:FindFirstChild("Data")
            local playerCash = playerData and playerData:FindFirstChild("Cash") and playerData.Cash.Value or 0
            local itemPrice = parsePrice(data.Price)

            if playerCash < itemPrice then
                if Rayfield then
                    Rayfield:Notify({
                        Title = "Shop",
                        Content = "Not enough cash to buy " .. data.Name,
                        Duration = 4,
                        Image = "x-circle"
                    })
                end
                return
            end

            if QuestEvent then
                QuestEvent:FireServer({ Item = key, Type = "StockBuy" })
                if Rayfield then
                    Rayfield:Notify({
                        Title = "Shop",
                        Content = "Purchased: " .. data.Name,
                        Duration = 5,
                        Image = "shopping-bag"
                    })
                end
            end
        end,
    })

    -------------------
    -- Refresh Manual Dropdown
    -------------------
    local function refreshManualDropdown()
        local availableKeys = {}
        for _, child in ipairs(availableStock:GetChildren()) do
            table.insert(availableKeys, child.Name)
        end

        table.sort(availableKeys, function(a, b)
            local ia = table.find(orderedKeys, a)
            local ib = table.find(orderedKeys, b)
            return (ia or math.huge) < (ib or math.huge)
        end)

        local options = {}
        for _, key in ipairs(availableKeys) do
            local data = stockTable[key]
            if data then
                table.insert(options, data.Name .. " (" .. key .. ") - " .. data.Price)
            end
        end

        ManualDropdown:Refresh(options)
        if #options > 0 and #ManualDropdown.CurrentOption == 0 then
            ManualDropdown:Set({ options[1] })
        end
    end

    refreshManualDropdown()
    if availableStock.ChildAdded then
        availableStock.ChildAdded:Connect(refreshManualDropdown)
    end
    if availableStock.ChildRemoved then
        availableStock.ChildRemoved:Connect(refreshManualDropdown)
    end

    -------------------
    -- AutoBuy Loop
    -------------------
    RunService.Heartbeat:Connect(function()
        if AutoBuyEnabled and AutoBuyTarget then
            local key = AutoBuyTarget:match("%((.-)%)")
            local data = key and stockTable[key]
            if not key or not data then return end

            local found = availableStock:FindFirstChild(key)
            if found then
                local playerData = player:FindFirstChild("Data")
                local playerCash = playerData and playerData:FindFirstChild("Cash") and playerData.Cash.Value or 0
                local itemPrice = parsePrice(data.Price)

                if playerCash >= itemPrice then
                    if QuestEvent then
                        QuestEvent:FireServer({ Item = key, Type = "StockBuy" })
                        if Rayfield then
                            Rayfield:Notify({
                                Title = "AutoBuy",
                                Content = "Purchased: " .. data.Name,
                                Duration = 5,
                                Image = "shopping-bag"
                            })
                        end
                        task.wait(0.5) -- throttle
                    end
                end
            end
        end
    end)

    return ShopTab
end
